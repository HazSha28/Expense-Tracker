package com.expense_tracker.gui;

import com.expense_tracker.dao.MainDAO;
import com.expense_tracker.model.Category;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.sql.SQLException;
import java.util.List;

public class CategoryGUI extends JFrame {
    private MainGUI mainGUI;
    private MainDAO mainDAO;

    private JTable categoryTable;
    private DefaultTableModel tableModel;
    private JTextField categoryField;
    private JButton addButton;
    private JButton deleteButton;
    private JButton refreshButton;

    public CategoryGUI(MainGUI mainGUI, MainDAO mainDAO) {
        this.mainGUI = mainGUI;
        this.mainDAO = mainDAO;

        initializeComponents();
        setupLayout();
        setupEventListeners();
        loadCategories();
    }

    private void initializeComponents() {
        setTitle("Manage Categories");
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setSize(600, 400);
        setLocationRelativeTo(mainGUI);

        // Table setup
        String[] columnNames = {"ID", "Category"};
        tableModel = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int col) {
                return false;
            }
        };

        categoryTable = new JTable(tableModel);
        categoryTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        categoryTable.setFillsViewportHeight(true);

        categoryField = new JTextField(20);
        addButton = new JButton("Add Category");
        deleteButton = new JButton("Delete Category");
        refreshButton = new JButton("Refresh");
    }

    private void setupLayout() {
        setLayout(new BorderLayout());

        JPanel inputPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        inputPanel.add(new JLabel("Category:"));
        inputPanel.add(categoryField);
        inputPanel.add(addButton);
        inputPanel.add(deleteButton);
        inputPanel.add(refreshButton);

        add(inputPanel, BorderLayout.NORTH);

        JScrollPane scrollPane = new JScrollPane(categoryTable);
        scrollPane.setPreferredSize(new Dimension(580, 300));
        add(scrollPane, BorderLayout.CENTER);
    }

    private void setupEventListeners() {
        addButton.addActionListener(e -> addCategory());
        deleteButton.addActionListener(e -> deleteCategory());
        refreshButton.addActionListener(e -> loadCategories());
    }

    private void addCategory() {
        String name = categoryField.getText().trim();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter category name", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            Category cat = new Category(name); // Only name; ID auto-generated by DB
            mainDAO.addCategory(cat);
            JOptionPane.showMessageDialog(this, "Category added successfully");
            categoryField.setText("");
            loadCategories();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error adding category: " + ex.getMessage(),
                    "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void deleteCategory() {
        int row = categoryTable.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Select a category to delete", "Selection Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int catId = (int) tableModel.getValueAt(row, 0);
        int confirm = JOptionPane.showConfirmDialog(this,
                "Delete category \"" + tableModel.getValueAt(row,1) + "\"?",
                "Confirm Delete",
                JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) return;

        try {
            mainDAO.deleteCategory(catId);
            loadCategories();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error deleting category: " + ex.getMessage(),
                    "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadCategories() {
        try {
            List<Category> list = mainDAO.getAllCategories();
            tableModel.setRowCount(0);
            for (Category c : list) {
                Object[] row = { c.getCatId(), c.getCatName() };
                tableModel.addRow(row);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error loading categories: " + ex.getMessage(),
                    "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
